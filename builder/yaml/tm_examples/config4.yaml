---
# recognizes {a^n | n \equiv 2 \mod 5}
# over alphabet {a}

start: start
accept: accept
reject: reject
transitions:
    ### Macro 1 -- place "$" on either end of the input string
    # place the first "$"
    - [start, a, placeA, "$", R]
    - [start, _, place$, "$", R]

    # place "a" and keep going
    - [placeA, a, placeA, a, R]
    - [placeA, _, place$, a, R]

    # place "$" and return back to the start
    - [place$, _, return, "$", L]

    # look for "$" and start the macro 2
    - [return, a, return, a, L]
    - [return, "$", zero, "$", R]

    ### Macro 2 -- count the "a"s reset after 5, accept if ended with 2
    # have zero "a"
    - [zero, a, one, a, R]
    - [zero, "$", reject, "$", R]

    # have one "a"
    - [one, a, two, a, R]
    - [one, "$", reject, "$", R]

    # have two "a"
    - [two, a, three, a, R]
    - [two, "$", accept, "$", R]

    # have three "a"
    - [three, a, four, a, R]
    - [three, "$", reject, "$", R]

    # have four "a"
    - [four, a, five, a, R]
    - [four, "$", reject, "$", R]

    # have five "a"
    - [five, a, zero, a, R]
    - [five, "$", reject, "$", R]
